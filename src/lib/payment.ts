const MERCHANT_API_URL = "https://api.merchant001.io/v1";
const API_TOKEN =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJWSm9ZdXFhN2RraFo1R1VXOWVOd2tKTmZlNHMxIiwiZGF0ZSI6IjIwMjUtMDUtMjlUMDg6MDM6MzMuMDg4WiIsImlhdCI6MTc0ODUwNTgxM30.4mSCsAQFaSlqHPb4cH4IFRWkdF638P9oliV5rKweCCg";

export interface PaymentRequest {
  amount: number;
  currency: string;
  description: string;
  customer_email: string;
  customer_phone?: string;
  return_url?: string;
  callback_url?: string;
}

export async function createPaymentSession(data: PaymentRequest) {
  try {
    console.log("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", data);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ merchant001.io
    const transactionData = {
      project_id: import.meta.env.VITE_MERCHANT_PROJECT_ID || "test_project_id",
      amount: data.amount,
      currency: data.currency || "RUB",
      order_id: `redotpay_${Date.now()}`,
      description: data.description,
      success_url:
        data.return_url || `${window.location.origin}/payment-success`,
      fail_url: `${window.location.origin}/payment-failed`,
      callback_url:
        data.callback_url || `${window.location.origin}/api/payment-callback`,
      customer: {
        email: data.customer_email,
        phone: data.customer_phone || "",
      },
    };

    console.log("üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", transactionData);

    const response = await fetch(`${MERCHANT_API_URL}/transaction`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        Authorization: `Bearer ${API_TOKEN}`,
      },
      body: JSON.stringify(transactionData),
    });

    console.log("üì® –û—Ç–≤–µ—Ç –æ—Ç API:", response.status, response.statusText);

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå –û—à–∏–±–∫–∞ API (—Ç–µ–∫—Å—Ç):", errorText);

      let errorData;
      try {
        errorData = JSON.parse(errorText);
      } catch {
        errorData = { message: errorText };
      }

      throw new Error(
        `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${response.status} - ${errorData.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
      );
    }

    const result = await response.json();
    console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", result);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL –≤ –æ—Ç–≤–µ—Ç–µ
    const paymentUrl = result.url || result.payment_url || result.redirect_url;

    if (!paymentUrl) {
      console.error("‚ùå URL –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ:", result);
      throw new Error("–ù–µ –ø–æ–ª—É—á–µ–Ω URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã");
    }

    console.log("üîó URL –¥–ª—è –æ–ø–ª–∞—Ç—ã:", paymentUrl);

    return {
      ...result,
      payment_url: paymentUrl,
    };
  } catch (error) {
    console.error("üí• –û—à–∏–±–∫–∞ API –∫–∞—Å—Å—ã:", error);

    if (error instanceof TypeError && error.message.includes("fetch")) {
      throw new Error(
        "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.",
      );
    }

    throw error;
  }
}

export function redirectToPayment(paymentUrl: string) {
  console.log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞:", paymentUrl);

  if (!paymentUrl) {
    console.error("‚ùå –ü—É—Å—Ç–æ–π URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
    throw new Error("URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω");
  }

  try {
    const url = new URL(paymentUrl);
    console.log("‚úÖ URL –≤–∞–ª–∏–¥–µ–Ω:", url.toString());

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setTimeout(() => {
      console.log("üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...");
      window.location.href = paymentUrl;
    }, 100);
  } catch (error) {
    console.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –æ–ø–ª–∞—Ç—ã:", paymentUrl, error);
    throw new Error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è –æ–ø–ª–∞—Ç—ã");
  }
}
