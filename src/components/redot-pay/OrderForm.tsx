import { useState } from "react";
import { Button } from "@/components/ui/button";
import Icon from "@/components/ui/icon";
import FormField from "./FormField";
import InfoBlock from "./InfoBlock";
import { RedotPayFormData } from "@/types/redot-pay";
import { saveUserInfo } from "@/lib/supabase";
import { createPaymentSession, redirectToPayment } from "@/lib/payment";

interface OrderFormProps {
  onSubmit: (data: RedotPayFormData) => void;
}

export default function OrderForm({ onSubmit }: OrderFormProps) {
  const [formData, setFormData] = useState<RedotPayFormData>({
    email: "",
    telegramNick: "",
    comment: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      console.log("üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞...");

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Supabase
      console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
      await saveUserInfo({
        email: formData.email,
        telegram_nick: formData.telegramNick,
        comment: formData.comment,
      });
      console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");

      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–µ—Å—Å–∏—é
      console.log("üí≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–µ—Å—Å–∏—é...");
      const paymentData = await createPaymentSession({
        amount: 2500,
        currency: "RUB",
        description: "–ó–∞–∫–∞–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã RedotPay",
        customer_email: formData.email,
        return_url: window.location.origin + "/payment-success",
        callback_url: window.location.origin + "/api/payment-callback",
      });
      console.log("‚úÖ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:", paymentData);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
      onSubmit(formData);

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã
      console.log("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–ø–ª–∞—Ç—É...");
      redirectToPayment(paymentData.payment_url);
    } catch (error) {
      console.error("üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
      const errorMessage =
        error instanceof Error ? error.message : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";

      alert(
        `‚ùå –û—à–∏–±–∫–∞: ${errorMessage}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.`,
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleInputChange = (field: keyof RedotPayFormData, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-8">
      <FormField
        id="email"
        label="Email –∞–¥—Ä–µ—Å"
        placeholder="–≤–∞—à@email.com"
        type="email"
        value={formData.email}
        onChange={(value) => handleInputChange("email", value)}
        required
      />

      <FormField
        id="telegramNick"
        label="–ù–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º"
        placeholder="@–≤–∞—à_–Ω–∏–∫"
        value={formData.telegramNick}
        onChange={(value) => handleInputChange("telegramNick", value)}
        required
      />

      <InfoBlock />

      <FormField
        id="comment"
        label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
        placeholder="–£–∫–∞–∂–∏—Ç–µ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã..."
        value={formData.comment}
        onChange={(value) => handleInputChange("comment", value)}
        optional
        multiline
      />

      <div className="flex justify-center">
        <Button
          type="submit"
          disabled={isSubmitting}
          className="bg-gradient-to-r from-gray-600 to-gray-800 hover:from-gray-700 hover:to-gray-900 text-white font-semibold px-8 py-2 h-10 text-sm w-auto min-w-[120px]"
        >
          {isSubmitting ? (
            <>
              <Icon name="Loader2" className="mr-2 h-4 w-4 animate-spin" />
              –û–±—Ä–∞–±–æ—Ç–∫–∞...
            </>
          ) : (
            "–ö—É–ø–∏—Ç—å –∑–∞ 2500‚ÇΩ"
          )}
        </Button>
      </div>
    </form>
  );
}
